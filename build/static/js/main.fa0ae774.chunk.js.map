{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Navbar/index.js","helpers/typeColors.js","components/Card/Card.js","components/Card/index.js","services/pokemon.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Navbar","className","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","src","sprites","front_default","alt","name","type","map","style","backgroundColor","weight","height","abilities","ability","getPokemon","url","Promise","resolve","reject","fetch","then","res","json","data","getAllPokemon","a","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","next","previous","loadPokemon","results","fetchData","prev","all","pokemonRecord","_pokemonData","textAlign","onClick","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa0ae774.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './style.css';\n\nfunction Navbar() {\n    return (\n        <div className=\"Navbar\">\n            Pokemon API\n        </div>\n    );\n}\n\nexport default Navbar;","import Navbar from './Navbar';\n\nexport default Navbar;","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React from 'react';\nimport typeColors from '../../helpers/typeColors';\nimport './style.css';\n\nfunction Card({ pokemon }) {\n    return (\n        <div className=\"Card\">\n            <div className=\"Card_img\">\n                <img src={pokemon.sprites.front_default} alt=\"\"/>\n            </div>\n            <div className=\"Card_name\">\n                {pokemon.name}\n            </div>\n            <div className=\"Card_type\">\n                { pokemon.type.map(type => {\n                    return (\n                        <div className=\"Card__type\" style={{ backgroundColor: typeColors[type.type.name] }}>\n                                {type.type.name}\n                            </div>\n                    )\n                })\n            }\n            </div>\n            <div className=\"Card_info\">\n                <div className=\"Card_data Card_data--weight\">\n                    <p className=\"title\">Weight</p>\n                    <p>{pokemon.weight}</p>\n                </div>\n                <div className=\"Card_data Card_data--height\">\n                    <p className=\"title\">Height</p>\n                    <p>{pokemon.height}</p>\n                </div>\n                <div className=\"Card_data Card_data--ability\">\n                    <p className=\"title\">Ability</p>\n                    <p>{pokemon.abilities[0].ability.name}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import Card from './Card';\n\nexport default Card;","// import { exhaust } from \"rxjs-compat/operator/exhaust\";\nimport { exhaust } from \"rxjs\";\n\nexport function getPokemon ({ url }) {\n    return new Promise(( resolve, reject) => {\n        fetch(url).then(res => res.json())\n        .then(data => {\n            resolve(data)\n        })\n    });\n}\n\nexport async function getAllPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url).then(res => res.json())\n            .then(data => {\n            resolve(data)\n        })\n    });\n}","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect} from 'react';\nimport Navbar from './components/Navbar';\nimport Card from './components/Card';\nimport { getPokemon, getAllPokemon } from './services/pokemon';\nimport './App.css';\n// import { of } from 'rxjs/observable/of';\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([])\n  const [nextUrl, setNextUrl] = useState('');\n  const [prevUrl, setPrevUrl] = useState('');\n  const [loading, setLoading] = useState(true);\n  const initialUrl = 'https://pokeapi.co/api/v2/pokemon';\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      await loadPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, [])\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl);\n    await loadPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl);\n    await loadPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const loadPokemon = async (data) => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon)\n      return pokemonRecord\n    }))\n    setPokemonData(_pokemonData);\n  }\n\n  return (\n    <>\n      <Navbar />\n      <div>\n        {loading ? <h1 style={{ textAlign: 'center' }}>Loading...</h1> : (\n          <>\n            <div className=\"btn\">\n              <button onClick={prev}>Prev</button>\n              <button onClick={next}>Next</button>\n            </div>\n            <div className=\"grid-container\">\n              {pokemonData.map((pokemon, i) => {\n                return <Card key={i} pokemon={pokemon} />\n              })}\n            </div>\n            <div className=\"btn\">\n              <button onClick={prev}>Prev</button>\n              <button onClick={next}>Next</button>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n// import { filter } from 'rxjs/operators';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}